From 9cd2a80b68cbbd1883ac61b253d226d8c5f5537c Mon Sep 17 00:00:00 2001
From: Ben Nemec <bnemec@redhat.com>
Date: Tue, 12 Apr 2016 17:54:45 +0000
Subject: [PATCH 2/2] Avoid duplicate sections in generator output

Because option groups can be specified as either bare strings or
OptGroup objects, it is possible to end up with duplicate sections
in the resulting output file.  This is confusing, and can cause
problems for config management systems so we should avoid doing it.

This change avoids the dupes by always keying the group list on
the group name, but including the OptGroup object in the data
when available so the output code can make use of the extra
information in an OptGroup.

Change-Id: I2cd8ae87a1f573b5837d292abcf7babf5d88bee5
Closes-Bug: 1568820
---
 oslo_config/generator.py            | 56 +++++++++++++++++-------
 oslo_config/tests/test_generator.py | 85 ++++++++++++++++++++++++++++++++-----
 2 files changed, 115 insertions(+), 26 deletions(-)

diff --git a/oslo_config/generator.py b/oslo_config/generator.py
index 9a84b0c..0cc321b 100644
--- a/oslo_config/generator.py
+++ b/oslo_config/generator.py
@@ -347,9 +347,9 @@ def on_load_failure_callback(*args, **kwargs):
     raise
 
 
-def _output_opts(f, group, namespaces):
-    f.format_group(group)
-    for (namespace, opts) in sorted(namespaces,
+def _output_opts(f, group, group_data):
+    f.format_group(group_data['object'] or group)
+    for (namespace, opts) in sorted(group_data['namespaces'],
                                     key=operator.itemgetter(0)):
         f.write('\n#\n# From %s\n#\n' % namespace)
         for opt in opts:
@@ -362,23 +362,49 @@ def _output_opts(f, group, namespaces):
                 f.write('# %s\n' % (err,))
 
 
-def _get_group_name(item):
-    group = item[0]
-    # The keys of the groups dictionary could be an OptGroup. Otherwise the
-    # help text of an OptGroup wouldn't be part of the generated sample
-    # file. It could also be just a plain group name without any further
-    # attributes. That's the reason why we have to differentiate here.
-    return group.name if isinstance(group, cfg.OptGroup) else group
+def _get_group_data(group, groups):
+    """Lookup or populate group data
+
+    If a key for group does not already exist in groups, populate it with a
+    structure that looks like:
+
+    {group_name: {'object': <None if group is a str | group>,
+                  'namespaces': [<list of group namespaces>]}}
+
+    If group is an instance of OptGroup, then group.name will be used as the
+    key for the dict entry.  Otherwise group is expected to be a string
+    representing the name of the group and its value will be used directly.
+    This avoids adding duplicate group names in case a group is added as
+    both an OptGroup and as a str, but still makes the additional OptGroup
+    data available to the output code when possible.
+    """
+    group_name = group
+    is_optgroup = False
+    try:
+        group_name = group.name
+        is_optgroup = True
+    except AttributeError:
+        pass
+
+    if group_name in groups:
+        if is_optgroup:
+            groups[group_name]['object'] = group
+        return groups[group_name]
+
+    default = {'object': None, 'namespaces': []}
+    if is_optgroup:
+        default = {'object': group, 'namespaces': []}
+    return groups.setdefault(group_name or 'DEFAULT', default)
 
 
 def _get_groups(conf_ns):
-    groups = {'DEFAULT': []}
+    groups = {'DEFAULT': {'object': None, 'namespaces': []}}
     for namespace, listing in conf_ns:
         for group, opts in listing:
             if not opts:
                 continue
-            namespaces = groups.setdefault(group or 'DEFAULT', [])
-            namespaces.append((namespace, opts))
+            group_data = _get_group_data(group, groups)
+            group_data['namespaces'].append((namespace, opts))
     return groups
 
 
@@ -404,9 +430,9 @@ def generate(conf):
     _output_opts(formatter, 'DEFAULT', groups.pop('DEFAULT'))
 
     # output all other config sections with groups in alphabetical order
-    for group, namespaces in sorted(groups.items(), key=_get_group_name):
+    for group, group_data in sorted(groups.items()):
         formatter.write('\n\n')
-        _output_opts(formatter, group, namespaces)
+        _output_opts(formatter, group, group_data)
 
 
 def main(args=None):
diff --git a/oslo_config/tests/test_generator.py b/oslo_config/tests/test_generator.py
index 14c86e4..7e63824 100644
--- a/oslo_config/tests/test_generator.py
+++ b/oslo_config/tests/test_generator.py
@@ -711,6 +711,78 @@ class GeneratorTestCase(base.BaseTestCase):
 # string with bad default (string value)
 #string_type_with_bad_default = 4096
 ''')),
+         ('str_opt_str_group',
+         dict(opts=[('test', [('foo',
+                               [opts['str_opt']]),
+                              (groups['foo'],
+                               [opts['int_opt']])]),
+                    ('foo', [('foo',
+                               [opts['bool_opt']])])],
+              expected='''[DEFAULT]
+
+
+[foo]
+# foo help
+
+#
+# From foo
+#
+
+# a boolean (boolean value)
+#bool_opt = false
+
+#
+# From test
+#
+
+# a string (string value)
+#str_opt = foo bar
+
+#
+# From test
+#
+
+# an integer (integer value)
+# Minimum value: 1
+# Maximum value: 20
+#int_opt = 10
+''')),
+         ('opt_str_opt_group',
+         dict(opts=[('test', [(groups['foo'],
+                               [opts['int_opt']]),
+                              ('foo',
+                               [opts['str_opt']])]),
+                    ('foo', [(groups['foo'],
+                              [opts['bool_opt']])])],
+              expected='''[DEFAULT]
+
+
+[foo]
+# foo help
+
+#
+# From foo
+#
+
+# a boolean (boolean value)
+#bool_opt = false
+
+#
+# From test
+#
+
+# an integer (integer value)
+# Minimum value: 1
+# Maximum value: 20
+#int_opt = 10
+
+#
+# From test
+#
+
+# a string (string value)
+#str_opt = foo bar
+''')),
     ]
 
     output_file_scenarios = [
@@ -870,19 +942,10 @@ class GeneratorAdditionalTestCase(base.BaseTestCase):
             cfg.BoolOpt('bool_opt', help='a boolean'),
             cfg.IntOpt('int_opt', help='an integer')]
 
-    def test_get_group_name(self):
-        name = "group1"
-        item = [name]
-        self.assertEqual(name, generator._get_group_name(item))
-
-    def test_get_group_name_as_optgroup(self):
-        name = "group2"
-        item = [cfg.OptGroup(name)]
-        self.assertEqual(name, generator._get_group_name(item))
-
     def test_get_groups_empty_ns(self):
         groups = generator._get_groups([])
-        self.assertEqual({'DEFAULT': []}, groups)
+        self.assertEqual({'DEFAULT': {'object': None, 'namespaces': []}},
+                         groups)
 
     def test_get_groups_single_ns(self):
         config = [("namespace1", [
-- 
2.7.4

